import pygame
import sys
import random

pygame.init()

# Screen settings
TOP_MARGIN = 100
BOTTOM_MARGIN = 100
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 700
cell_size = 0
grid_pixel_size = 0
grid_start_x = 0
grid_start_y = 0
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Rolling XO")

# Colors
BG_COLOR = (28, 170, 156)
LINE_COLOR = (23, 145, 135)
CIRCLE_COLOR = (239, 231, 200)
CROSS_COLOR = (66, 66, 66)
WIN_LINE_COLOR = (255, 0, 0)
TEXT_COLOR = (255, 255, 255)
BUTTON_COLOR = (50, 50, 50)
BUTTON_HOVER = (100, 100, 100)

# Fonts
font = pygame.font.SysFont(None, 50)
small_font = pygame.font.SysFont(None, 36)
tiny_font = pygame.font.SysFont(None, 28)
try:
    emoji_font = pygame.font.SysFont("Segoe UI Emoji", SCREEN_WIDTH // 3 // 2)
except:
    emoji_font = font

# Game state
grid_size = 3
win_length = 3
cell_size = SCREEN_WIDTH // grid_size
board = []
move_history = {"X": [], "O": []}
player_turn = "X"
game_over = False
winner = None
in_game = False
show_rules_screen = False
selected_grid_size = None
bombs = []
traps = []
emoji_flash = {}
EMOJI_FLASH_DURATION = 700
rules_page = 1
mode_selection = False
game_mode = "friend"
play_mode = None  # "friend" or "pc"
show_mode_screen = True  # Starts at mode selection
player_count = 2  # Default to 2 players
player_symbols = []
current_player_index = 0
show_player_count_screen = False
turn_direction = 1  # 1 means normal order, -1 means reversed order


BOMB_COUNT = {3: 0, 5: 2, 6: 3}
TRAP_COUNT = {3: 0, 5: 2, 6: 3}


class Button:
    def __init__(self, x, y, w, h, text, action):
        self.rect = pygame.Rect(x, y, w, h)
        self.text = text
        self.action = action

    def draw(self, mouse_pos):
        color = BUTTON_HOVER if self.rect.collidepoint(mouse_pos) else BUTTON_COLOR
        pygame.draw.rect(screen, color, self.rect, border_radius=10)
        text_surf = small_font.render(self.text, True, TEXT_COLOR)
        screen.blit(text_surf, (self.rect.centerx - text_surf.get_width() // 2,
                                self.rect.centery - text_surf.get_height() // 2))

    def handle_event(self, event, mouse_pos):
        if event.type == pygame.MOUSEBUTTONDOWN and self.rect.collidepoint(mouse_pos):
            self.action()

def next_player():
    global current_player_index, player_turn
    current_player_index = (current_player_index + turn_direction) % len(player_symbols)
    player_turn = player_symbols[current_player_index]

def select_mode(mode):
    global play_mode, show_mode_screen, show_player_count_screen, player_count
    play_mode = mode
    show_mode_screen = False

    if mode == "friend":
        show_player_count_screen = True
    else:
        player_count = 2  # ✅ Fix here
        show_player_count_screen = False
        # Prepare next screen after setting player count
        global player_symbols, home_buttons
        player_symbols = ["X", "O"]
        home_buttons = draw_home_screen()



from functools import partial

def draw_player_count_screen():
    screen.fill(BG_COLOR)

    # Box
    box_w, box_h = 400, 400
    box_x = (SCREEN_WIDTH - box_w) // 2
    box_y = 160
    pygame.draw.rect(screen, (0, 90, 90), (box_x, box_y, box_w, box_h), border_radius=40)

    # Title
    title_surf = font.render("Select Player Count", True, TEXT_COLOR)
    screen.blit(title_surf, (SCREEN_WIDTH // 2 - title_surf.get_width() // 2, box_y + 30))

    # Buttons
    button_width = 200
    button_height = 60
    button_gap = 20
    start_y = box_y + 100

    options = [("2 Players", 2), ("3 Players", 3), ("4 Players", 4)]
    buttons = []
    for i, (label, count) in enumerate(options):
        btn_x = SCREEN_WIDTH // 2 - button_width // 2
        btn_y = start_y + i * (button_height + button_gap)
        action = partial(set_player_count, count)  # ✅ Prevents late-binding issue
        buttons.append(Button(btn_x, btn_y, button_width, button_height, label, action))

    mouse_pos = pygame.mouse.get_pos()
    for b in buttons:
        b.draw(mouse_pos)
    return buttons


def set_player_count(count):
    global player_count, player_symbols, show_player_count_screen, home_buttons

    player_count = count
    show_player_count_screen = False  # ✅ hide 2P/3P/4P

    if count == 2:
        player_symbols = ["X", "O"]
    elif count == 3:
        player_symbols = ["X", "O", "★"]
    elif count == 4:
        player_symbols = ["X", "O", "★", "☐"]

    # Show grid/home size selection next
    home_buttons = draw_home_screen()



def generate_bombs_and_traps():
    global bombs, traps, emoji_flash
    cells = [(r, c) for r in range(grid_size) for c in range(grid_size)]
    bombs = []
    traps = []
    emoji_flash = {}
    if BOMB_COUNT.get(grid_size, 0) > 0:
        bombs = random.sample(cells, BOMB_COUNT[grid_size])
    remaining = [c for c in cells if c not in bombs]
    if TRAP_COUNT.get(grid_size, 0) > 0:
        traps = random.sample(remaining, TRAP_COUNT[grid_size])


def start_game(size):
    global selected_grid_size, board, show_rules_screen, rules_page
    selected_grid_size = size
    update_grid_layout(selected_grid_size)
    board = [["" for _ in range(selected_grid_size)] for _ in range(selected_grid_size)]
    rules_page = 1
    show_rules_screen = True

import base64
import io
import pygame

# Your base64-encoded image string (shortened example)
img_base64 = """
.
"""  # Put your full base64 string here

# Decode once, load image surface once (do this outside the function ideally)
img_bytes = base64.b64decode(img_base64)
img_file = io.BytesIO(img_bytes)
img_surface = pygame.image.load(img_file).convert_alpha()  # Use convert_alpha for PNG transparency

# Optionally scale image to fit like emoji font size ~72px height
img_height = 200
scale_factor = img_height / img_surface.get_height()
img_width = int(img_surface.get_width() * scale_factor)
img_surface = pygame.transform.smoothscale(img_surface, (img_width, img_height))


def draw_mode_screen():
    screen.fill(BG_COLOR)

    # Image Title - centered horizontally at y=60
    emoji_y = 40
    emoji_x = (SCREEN_WIDTH - img_surface.get_width()) // 2
    screen.blit(img_surface, (emoji_x, emoji_y))

    # Box dimensions centered horizontally, and pitioned below image with some padding
    box_w, box_h = 420, 280
    box_x = (SCREEN_WIDTH - box_w) // 2
    box_y = emoji_y + img_surface.get_height() + 10  # 40px gap below image

    box_color = (0, 90, 90)  # Dark teal
    pygame.draw.rect(screen, box_color, (box_x, box_y, box_w, box_h), border_radius=40)

    # Title inside box, centered horizontally within the box
    title_text = "Select Play Mode"
    title_surf = font.render(title_text, True, (255, 255, 255))
    title_x = box_x + (box_w - title_surf.get_width()) // 2
    title_y = box_y + 30
    screen.blit(title_surf, (title_x, title_y))

    # Buttons inside the box, centered horizontally and spaced evenly vertically
    button_width = 250
    button_height = 60
    btn_x = box_x + (box_w - button_width) // 2

    num_buttons = 2
    total_buttons_height = num_buttons * button_height
    total_gap_height = box_h - 30 - title_surf.get_height() - total_buttons_height
    gap = total_gap_height // (num_buttons + 1)

    buttons = []
    for i, (label, mode) in enumerate([
        ("Play with Friend", "friend"),
        ("Play vs Computer", "pc")
    ]):
        btn_y = title_y + title_surf.get_height() + gap * (i + 1) + button_height * i
        buttons.append(Button(btn_x, btn_y, button_width, button_height, label, lambda m=mode: select_mode(m)))

    mouse_pos = pygame.mouse.get_pos()
    for b in buttons:
        b.draw(mouse_pos)

    return buttons



def launch_game():
    global grid_size, board, move_history, player_turn, current_player_index
    global game_over, winner, in_game, win_length, cell_size, emoji_font
    global bombs, traps, emoji_flash, show_rules_screen

    win_length = 3 if selected_grid_size == 3 else 4
    grid_size = selected_grid_size
    #cell_size = SCREEN_WIDTH // grid_size
    board = [[None for _ in range(grid_size)] for _ in range(grid_size)]

    move_history = {symbol: [] for symbol in player_symbols}
    current_player_index = 0
    player_turn = player_symbols[current_player_index]
    game_over = False
    winner = None
    in_game = True
    show_rules_screen = False
    generate_bombs_and_traps()
    emoji_flash = {}

    try:
        emoji_font = pygame.font.SysFont("Segoe UI Emoji", cell_size // 2)
    except:
        emoji_font = font



def restart_game():
    start_game(grid_size)


def go_home():
    global in_game, show_rules_screen, player_symbols, current_player_index
    in_game = False
    show_rules_screen = False
    current_player_index = 0


def draw_vertical_gradient(surface, top_color, bottom_color):
    """Draw a vertical gradient filling the surface from top_color to bottom_color."""
    height = surface.get_height()
    for y in range(height):
        ratio = y / height
        r = int(top_color[0] * (1 - ratio) + bottom_color[0] * ratio)
        g = int(top_color[1] * (1 - ratio) + bottom_color[1] * ratio)
        b = int(top_color[2] * (1 - ratio) + bottom_color[2] * ratio)
        pygame.draw.line(surface, (r, g, b), (0, y), (surface.get_width(), y))

def draw_text_with_shadow(text, font, color, shadow_color, x, y, shadow_offset=(2, 2)):
    """Draw text with a shadow for better visibility."""
    shadow_surf = font.render(text, True, shadow_color)
    screen.blit(shadow_surf, (x + shadow_offset[0], y + shadow_offset[1]))
    text_surf = font.render(text, True, color)
    screen.blit(text_surf, (x, y))

def back_to_mode_selection():
    global show_mode_screen, show_rules_screen, in_game
    show_mode_screen = True
    show_rules_screen = False
    in_game = False

def draw_home_screen():
    screen.fill((28, 170, 156))  # Solid teal background

    # Buttons inside box
    button_w, button_h = 240, 70
    option_gap = 80

    options = ["3 x 3", "5 x 5", "6 x 6"]

    # Count how many buttons will be shown (skip "3x3" if player_count >= 3)
    visible_buttons_count = sum(
        1 for option in options if not (player_count >= 3 and int(option[0]) == 3)
    )

    # Calculate box height dynamically: title + buttons + padding
    title_height = 70
    padding_top = 30
    padding_bottom = 30
    box_h = padding_top + title_height + (visible_buttons_count - 1) * option_gap + button_h + padding_bottom
    box_w = 400
    box_x = (SCREEN_WIDTH - box_w) // 2
    box_y = 160
    box_color = (0, 90, 90)
    pygame.draw.rect(screen, box_color, (box_x, box_y, box_w, box_h), border_radius=40)

    # Title text
    title_text = "Select Grid Size"
    title_surf = font.render(title_text, True, (255, 255, 255))
    title_x = box_x + (box_w - title_surf.get_width()) // 2
    title_y = box_y + padding_top
    screen.blit(title_surf, (title_x, title_y))

    start_y = title_y + title_surf.get_height() + 20  # 20 px gap after title

    buttons = []
    button_index = 0
    for option in options:
        grid_num = int(option[0])
        if player_count >= 3 and grid_num == 3:
            continue  # Skip 3x3 for 3P or 4P

        btn_x = box_x + (box_w - button_w) // 2
        btn_y = start_y + button_index * option_gap

        btn = Button(btn_x, btn_y, button_w, button_h, option, lambda size=grid_num: start_game(size))
        buttons.append(btn)
        btn.draw(pygame.mouse.get_pos())

        button_index += 1

    # Mode button below the box, with 30 px margin
    mode_btn_w, mode_btn_h = 180, 50
    mode_btn_x = (SCREEN_WIDTH - mode_btn_w) // 2
    mode_btn_y = box_y + box_h + 30

    mode_button = Button(mode_btn_x, mode_btn_y, mode_btn_w, mode_btn_h, "Mode", back_to_mode_selection)
    buttons.append(mode_button)
    mode_button.draw(pygame.mouse.get_pos())

    return buttons



def draw_wrapped_text(surface, text, x, y, font, color, max_width, line_height):
    words = text.split(' ')
    line = ""
    lines = []
    for word in words:
        test_line = line + word + " "
        test_width = font.size(test_line)[0]
        if test_width > max_width:
            lines.append(line)
            line = word + " "
        else:
            line = test_line
    lines.append(line)

    for i, line in enumerate(lines):
        text_surf = font.render(line, True, color)
        surface.blit(text_surf, (x, y + i * line_height))
    return y + len(lines) * line_height


def draw_rules_screen():
    global rules_page

    # Fonts (ideally create once globally, not here every frame)
    title_font = pygame.font.SysFont("Arial", 46, bold=True)
    header_font = pygame.font.SysFont("Roman", 30)
    bullet_font = pygame.font.SysFont("Arial", 26)
    emoji_font = pygame.font.SysFont("Segoe UI Emoji", 56)

    screen.fill(BG_COLOR)

    # Box layout
    box_rect = pygame.Rect(50, 120, SCREEN_WIDTH - 100, SCREEN_HEIGHT - 250)
    pygame.draw.rect(screen, (30,130,120), box_rect, border_radius=25)
    pygame.draw.rect(screen, (255,255,255), box_rect, width=3, border_radius=25)

    # Title
    title_surf = title_font.render("Game Rules", True, TEXT_COLOR)
    screen.blit(title_surf, (SCREEN_WIDTH // 2 - title_surf.get_width() // 2, 50))

    # Rules data
    all_rules = {
        1: [
            ("🎯 Objective", [
                "Get 3 in a row on 3x3, or 4 in a row on 5x5/6x6 to win.",
                "Classic Tic Tac Toe with a twist!"
            ]),
            ("⏱️ Turn Limit", [
                "Max 4 active moves per player.",
                "Oldest moves vanish as new ones are made."
            ]),
        ],
        2: [
            ("💣 Bomb", [
                "Clicking a bomb skips your turn.",
                "The bomb then moves elsewhere."
            ]),
            ("🔁 Trap", [
                "Clicking a trap places opponent’s symbol.",
                "The trap moves to a new spot."
            ]),
        ]
    }

    rules_to_show = all_rules[1] if selected_grid_size == 3 else all_rules.get(rules_page, [])

    def render_text_wrapped(text, font, color, x, y, max_width, line_height):
        words = text.split(' ')
        lines, line = [], ''
        for w in words:
            test_line = line + w + ' '
            if font.size(test_line)[0] <= max_width:
                line = test_line
            else:
                lines.append(line)
                line = w + ' '
        lines.append(line)
        for i, ln in enumerate(lines):
            screen.blit(font.render(ln.strip(), True, color), (x, y + i * line_height))
        return len(lines) * line_height

    y = box_rect.top + 30
    margin_x = box_rect.left + 30
    max_width = box_rect.width - 60
    section_color = (255, 255, 180)

    for header, points in rules_to_show:
        emoji, text = header.split(' ', 1) if ' ' in header else ("", header)
        emoji_surf = emoji_font.render(emoji, True, section_color) if emoji else None
        emoji_w = emoji_surf.get_width() if emoji_surf else 0

        if emoji_surf:
            screen.blit(emoji_surf, (margin_x, y))
        header_surf = header_font.render(text, True, section_color)
        screen.blit(header_surf, (margin_x + emoji_w + 8, y + ((emoji_surf.get_height() - header_surf.get_height()) // 2 if emoji_surf else 0)))
        y += max(emoji_surf.get_height() if emoji_surf else 0, header_surf.get_height()) + 10

        bullet_indent = 20
        line_h = bullet_font.get_height() + 4
        for point in points:
            screen.blit(bullet_font.render("•", True, TEXT_COLOR), (margin_x + bullet_indent, y))
            x_offset = margin_x + bullet_indent + bullet_font.size("•")[0] + 8
            y += render_text_wrapped(point, bullet_font, TEXT_COLOR, x_offset, y, max_width - bullet_indent - bullet_font.size("•")[0] - 8, line_h) + 5
        y += 15

    # Buttons
    buttons = []
    if selected_grid_size == 3:
        buttons = [
            Button(100, SCREEN_HEIGHT - 90, 150, 50, "Home", go_home),
            Button(350, SCREEN_HEIGHT - 90, 150, 50, "Start", launch_game),
        ]
    else:
        if rules_page == 1:
            buttons = [
                Button(100, SCREEN_HEIGHT - 90, 150, 50, "Home", go_home),
                Button(350, SCREEN_HEIGHT - 90, 150, 50, "Next", lambda: set_rules_page(2)),
            ]
        else:
            buttons = [
                Button(30, SCREEN_HEIGHT - 90, 130, 50, "Back", lambda: set_rules_page(1)),
                Button(245, SCREEN_HEIGHT - 90, 130, 50, "Start", launch_game),
                Button(460, SCREEN_HEIGHT - 90, 130, 50, "Home", go_home),
            ]

    return buttons



def set_rules_page(page_num):
    global rules_page
    rules_page = page_num


def update_grid_layout(size):
    global grid_size, board, cell_size, grid_pixel_size, grid_start_x, grid_start_y, SCREEN_WIDTH, TOP_MARGIN 

    grid_size = size
    board = [[None for _ in range(grid_size)] for _ in range(grid_size)]

    available_width = SCREEN_WIDTH - 40  # Leave horizontal padding
    available_height = SCREEN_HEIGHT - TOP_MARGIN - BOTTOM_MARGIN  # Leave space for top/bottom
    cell_size = min(available_width, available_height) // grid_size
    grid_pixel_size = cell_size * grid_size


    grid_start_x = (SCREEN_WIDTH - grid_pixel_size) // 2
    grid_start_y = TOP_MARGIN


def draw_board():
    screen.fill(BG_COLOR)

    # Skip drawing filled cells — only draw the grid lines

    # Draw only inner grid lines (skip outermost)
    global LINE_COLOR   # Darker line color
    line_thickness = 6         # Thicker lines

    # Horizontal inner lines (skip 0 and grid_size)
    for i in range(1, grid_size):
        y = grid_start_y + i * cell_size
        pygame.draw.line(screen, LINE_COLOR,
                         (grid_start_x, y),
                         (grid_start_x + grid_pixel_size, y),
                         line_thickness)

    # Vertical inner lines (skip 0 and grid_size)
    for i in range(1, grid_size):
        x = grid_start_x + i * cell_size
        pygame.draw.line(screen, LINE_COLOR,
                         (x, grid_start_y),
                         (x, grid_start_y + grid_pixel_size),
                         line_thickness)

    draw_current_player()




def draw_current_player():
    box_w, box_h = 120, 80
    box_x = SCREEN_WIDTH // 2 - box_w // 2
    box_y = (TOP_MARGIN - box_h) // 2  # center in top margin

    pygame.draw.rect(screen, (0, 90, 90), (box_x, box_y, box_w, box_h), border_radius=20)

    # Map player symbol to emoji:
    symbol_map = {
        "X": "❌",
        "O": "⭕",
        "★": "⭐",
        "☐": "⬜"
    }
    sym = player_symbols[current_player_index]
    emoji = symbol_map.get(sym, sym)  # fallback to symbol if not found

    sym_surf = emoji_font.render(emoji, True, TEXT_COLOR)
    screen.blit(sym_surf, (
        box_x + box_w // 2 - sym_surf.get_width() // 2,
        box_y + box_h // 2 - sym_surf.get_height() // 2
    ))



def next_player(normal=True, reverse=False):
    global current_player_index, player_turn
    if reverse:
        player_symbols.reverse()
        current_player_index = 1 % len(player_symbols)
    elif normal:
        current_player_index = (current_player_index + turn_direction) % len(player_symbols)
    player_turn = player_symbols[current_player_index]


def draw_symbols():
    now = pygame.time.get_ticks()
    symbol_map = {
        "X": "❌",
        "O": "⭕",
        "★": "⭐",
        "☐": "⬜"
    }

    for row in range(grid_size):
        for col in range(grid_size):
            symbol = board[row][col]
            center = (
                grid_start_x + col * cell_size + cell_size // 2,
                grid_start_y + row * cell_size + cell_size // 2
            )

            # Render emoji if symbol exists in map, else skip drawing
            if symbol in symbol_map:
                emoji = symbol_map[symbol]
                emoji_surf = emoji_font.render(emoji, True, TEXT_COLOR)
                emoji_rect = emoji_surf.get_rect(center=center)
                screen.blit(emoji_surf, emoji_rect)

            # Emoji flash (bomb/trap)
            elif (row, col) in emoji_flash:
                start_time, etype = emoji_flash[(row, col)]
                if now - start_time < EMOJI_FLASH_DURATION:
                    emoji = "💣" if etype == 'bomb' else "🔁"
                    emoji_surf = emoji_font.render(emoji, True, WIN_LINE_COLOR)
                    emoji_rect = emoji_surf.get_rect(center=center)
                    screen.blit(emoji_surf, emoji_rect)


def draw_buttons():
    return [
        Button(100, SCREEN_WIDTH + 20, 150, 50, "Restart", restart_game),
        Button(350, SCREEN_WIDTH + 20, 150, 50, "Home", go_home)
    ]


def draw_winner_text():
    if winner:
        box_width = 400
        box_height = 150
        box_x = (SCREEN_WIDTH - box_width) // 2
        box_y = (SCREEN_HEIGHT - box_height) // 2  # Use SCREEN_HEIGHT here (not SCREEN_WIDTH)

        # Draw background box with curved edges
        pygame.draw.rect(screen, (0, 90, 90), (box_x, box_y, box_width, box_height), border_radius=30)
        pygame.draw.rect(screen, (255, 255, 255), (box_x, box_y, box_width, box_height), width=4, border_radius=30)

        # Map winner symbol to emoji
        symbol_map = {
            "X": "❌",
            "O": "⭕",
            "★": "⭐",
            "☐": "⬜"
        }
        emoji = symbol_map.get(winner, winner)

        # Render the emoji winner text
        winner_text = f"{emoji} wins!"
        text_surf = emoji_font.render(winner_text, True, TEXT_COLOR)
        text_x = box_x + (box_width - text_surf.get_width()) // 2
        text_y = box_y + (box_height - text_surf.get_height()) // 2

        # Draw text with shadow effect (assuming draw_text_with_shadow supports surfaces)
        draw_text_with_shadow(winner_text, emoji_font, TEXT_COLOR, (0, 0, 0), text_x, text_y)




def is_square_available(row, col):
    return board[row][col] is None


def mark_square(row, col, symbol):
    if len(move_history[symbol]) >= 4:
        old_r, old_c = move_history[symbol].pop(0)
        board[old_r][old_c] = None
    board[row][col] = symbol
    move_history[symbol].append((row, col))


def respawn_bomb_trap(original_pos, is_bomb):
    global bombs, traps
    if is_bomb:
        if original_pos in bombs:
            bombs.remove(original_pos)
    else:
        if original_pos in traps:
            traps.remove(original_pos)

    occupied = set()
    for r in range(grid_size):
        for c in range(grid_size):
            if board[r][c] is not None:
                occupied.add((r, c))
    occupied.update(bombs)
    occupied.update(traps)

    all_cells = [(r, c) for r in range(grid_size) for c in range(grid_size)]
    free_cells = [cell for cell in all_cells if cell not in occupied]

    if free_cells:
        new_cell = random.choice(free_cells)
        if is_bomb:
            bombs.append(new_cell)
        else:
            traps.append(new_cell)



def check_winner(player):
    for row in range(grid_size):
        count = 0
        for col in range(grid_size):
            count = count + 1 if board[row][col] == player else 0
            if count >= win_length:
                return True

    for col in range(grid_size):
        count = 0
        for row in range(grid_size):
            count = count + 1 if board[row][col] == player else 0
            if count >= win_length:
                return True

    for row in range(grid_size - win_length + 1):
        for col in range(grid_size - win_length + 1):
            if all(board[row + i][col + i] == player for i in range(win_length)):
                return True

    for row in range(grid_size - win_length + 1):
        for col in range(win_length - 1, grid_size):
            if all(board[row + i][col - i] == player for i in range(win_length)):
                return True

    return False


# Main loop
home_buttons = draw_home_screen()

def ai_make_move():
    opponent = "X"
    ai = "O"

    best_score = -float("inf")
    best_move = None

    for r in range(grid_size):
        for c in range(grid_size):
            if not is_square_available(r, c):
                continue

            risk_penalty = 0
            if (r, c) in bombs:
                risk_penalty = -50  # Very risky
            elif (r, c) in traps:
                risk_penalty = -20  # Still risky

            # Try move
            board[r][c] = ai
            if check_winner(ai):
                board[r][c] = None
                return r, c  # Win now!
            board[r][c] = None

            # Block opponent
            board[r][c] = opponent
            if check_winner(opponent):
                board[r][c] = None
                return r, c  # Block opponent!
            board[r][c] = None

            # Score strategic value
            score = 0
            if (r, c) == (grid_size // 2, grid_size // 2):
                score += 5  # Center is good
            if (r, c) in [(0,0), (0,grid_size-1), (grid_size-1,0), (grid_size-1,grid_size-1)]:
                score += 3  # Corners are good

            # Count adjacent same-symbol cells for potential line
            for dr in [-1, 0, 1]:
                for dc in [-1, 0, 1]:
                    if dr == 0 and dc == 0:
                        continue
                    nr, nc = r + dr, c + dc
                    if 0 <= nr < grid_size and 0 <= nc < grid_size:
                        if board[nr][nc] == ai:
                            score += 2
                        elif board[nr][nc] == opponent:
                            score += 1

            score += risk_penalty  # Subtract penalty for traps/bombs

            # Pick the highest scoring move
            if score > best_score:
                best_score = score
                best_move = (r, c)

    # If no good moves, pick a safe random fallback
    if best_move:
        return best_move

    # Fallback to any safe move
    safe_moves = [
        (r, c)
        for r in range(grid_size)
        for c in range(grid_size)
        if is_square_available(r, c) and (r, c) not in bombs and (r, c) not in traps
    ]
    if safe_moves:
        return random.choice(safe_moves)

    # Last resort: pick anything
    for r in range(grid_size):
        for c in range(grid_size):
            if is_square_available(r, c):
                return r, c

    return None, None

while True:
    mouse_pos = pygame.mouse.get_pos()
    events = pygame.event.get()
    now = pygame.time.get_ticks()

    for event in events:
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        # Mode selection screen
        if show_mode_screen:
            mode_buttons = draw_mode_screen()
            for b in mode_buttons:
                b.handle_event(event, mouse_pos)

        # Player count selection
        elif show_player_count_screen:
            player_buttons = draw_player_count_screen()
            for b in player_buttons:
                b.handle_event(event, mouse_pos)

        # Grid size selection (home screen)
        elif not in_game and not show_rules_screen:
            for b in home_buttons:
                b.handle_event(event, mouse_pos)

        # Rules screen
        elif show_rules_screen:
            rules_buttons = draw_rules_screen()
            for b in rules_buttons:
                b.handle_event(event, mouse_pos)

        # In-game logic
        else:
            for b in draw_buttons():
                b.handle_event(event, mouse_pos)

            if event.type == pygame.MOUSEBUTTONDOWN and not game_over and (play_mode == "friend" or (play_mode == "pc" and player_turn == "X")):
                x, y = event.pos

                # Only handle clicks inside the grid bounds
                if not (grid_start_x <= x < grid_start_x + grid_pixel_size and
                        grid_start_y <= y < grid_start_y + grid_pixel_size):
                    continue  # Outside grid, ignore

                row = (y - grid_start_y) // cell_size
                col = (x - grid_start_x) // cell_size

                # Safety check
                if row < 0 or row >= grid_size or col < 0 or col >= grid_size:
                    continue

                if (row, col) in emoji_flash:
                    continue
                if (row, col) in bombs:
                    emoji_flash[(row, col)] = (now, 'bomb')
                    bombs.remove((row, col))
                    continue
                if (row, col) in traps:
                    emoji_flash[(row, col)] = (now, 'trap')
                    traps.remove((row, col))
                    continue

                if is_square_available(row, col):
                    mark_square(row, col, player_turn)
                    if check_winner(player_turn):
                        winner = player_turn
                        game_over = True
                    else:
                        # Advance next player according to turn_direction
                        current_player_index = (current_player_index + turn_direction) % len(player_symbols)
                        player_turn = player_symbols[current_player_index]

    # Bomb/trap handling
    to_remove = []
    for pos, (start_time, etype) in emoji_flash.items():
        if now - start_time >= EMOJI_FLASH_DURATION:
            row, col = pos
            if etype == 'bomb':
                respawn_bomb_trap(pos, is_bomb=True)

                # Normal next player rotation, keep persistent turn_direction
                current_player_index = (current_player_index + turn_direction) % len(player_symbols)
                player_turn = player_symbols[current_player_index]

            elif etype == 'trap':
                respawn_bomb_trap(pos, is_bomb=False)

                if player_count == 2:
                    # 2P: Opponent auto marks and turn switches to opponent
                    opponent_index = (current_player_index + 1) % 2
                    opponent_symbol = player_symbols[opponent_index]

                    if is_square_available(row, col):
                        mark_square(row, col, opponent_symbol)
                        if check_winner(opponent_symbol):
                            winner = opponent_symbol
                            game_over = True

                    current_player_index = opponent_index
                    player_turn = opponent_symbol

                else:
                    # 3P or 4P:
                    # Current player marks trap cell if available
                    if is_square_available(row, col):
                        mark_square(row, col, player_turn)
                        if check_winner(player_turn):
                            winner = player_turn
                            game_over = True

                    # Reverse and persist turn order direction
                    turn_direction *= -1

                    # Advance current player index according to reversed direction
                    current_player_index = (current_player_index + turn_direction) % len(player_symbols)
                    player_turn = player_symbols[current_player_index]

            to_remove.append(pos)

    for pos in to_remove:
        emoji_flash.pop(pos, None)

    # AI move (2P only)
    if in_game and not game_over and play_mode == "pc" and player_turn == "O" and player_count == 2:
        if not hasattr(ai_make_move, "last_move_time") or ai_make_move.last_move_time is None:
            ai_make_move.last_move_time = now
        elif now - ai_make_move.last_move_time >= 500:
            ai_row, ai_col = ai_make_move()
            if ai_row is not None and is_square_available(ai_row, ai_col):
                mark_square(ai_row, ai_col, "O")
                if check_winner("O"):
                    winner = "O"
                    game_over = True
                else:
                    # Advance next player according to persistent turn_direction (should be 1 for 2P)
                    current_player_index = (current_player_index + turn_direction) % len(player_symbols)
                    player_turn = player_symbols[current_player_index]
            ai_make_move.last_move_time = None

    # Draw everything
    if show_mode_screen:
        for b in draw_mode_screen():
            b.draw(mouse_pos)
    elif show_player_count_screen:
        for b in draw_player_count_screen():
            b.draw(mouse_pos)
    elif not in_game and not show_rules_screen:
        home_buttons = draw_home_screen()
        for b in home_buttons:
            b.draw(mouse_pos)
    elif show_rules_screen:
        # ONLY draw rules screen here — no grid or game UI
        for b in draw_rules_screen():
            b.draw(mouse_pos)
    else:
        # DRAW game screen ONLY if rules screen is NOT shown
        draw_board()
        draw_symbols()
        if game_over:
            draw_winner_text()
        for b in draw_buttons():
            b.draw(mouse_pos)

    pygame.display.update()
